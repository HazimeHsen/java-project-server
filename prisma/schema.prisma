generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Assignment {
  id          Int       @id @default(autoincrement())
  title       String
  description String?
  classId     Int
  class       ClassRoom @relation(fields: [classId], references: [id])
  createdBy   Int
  creator     User      @relation(fields: [createdBy], references: [id])
  assignedTo  AssignmentAssignmentTo[]
  submissions Submission[]
  fileId       Int?
  file         FileUpload? @relation(fields: [fileId], references: [id]) // Link to FileUpload
}

model Submission {
  id            Int        @id @default(autoincrement())
  assignmentId  Int
  userId        Int
  fileName      String
  filePath      String
  createdAt     DateTime   @default(now())
  assignment    Assignment @relation(fields: [assignmentId], references: [id])
  user          User       @relation(fields: [userId], references: [id])
  grade       Int          @default(0)
}

model AssignmentAssignmentTo {
  id            Int        @id @default(autoincrement())
  assignmentId  Int
  userId        Int
  assignedAt    DateTime   @default(now())
  assignment    Assignment @relation(fields: [assignmentId], references: [id])
  user          User       @relation(fields: [userId], references: [id])
}

model User {
  id           Int                       @id @default(autoincrement())
  name         String
  email        String                    @unique
  password     String
  classes      ClassMember[]
  comments     Comment[]
  createdClasses ClassRoom[]             @relation("CreatedClasses")
  fileUploads  FileUpload[]
  assignments  AssignmentAssignmentTo[]
  submissions  Submission[]              // Track submissions for user

  Assignment Assignment[]
}
model ClassRoom {
  id           Int          @id @default(autoincrement())
  name         String
  description  String?
  createdBy    Int
  creator      User         @relation(fields: [createdBy], references: [id], name: "CreatedClasses")
  members      ClassMember[]
  fileUploads  FileUpload[]
  assignments  Assignment[]
}
model ClassMember {
  id         Int      @id @default(autoincrement())
  userId     Int
  classId    Int
  role       Role     @default(NORMAL)
  user       User     @relation(fields: [userId], references: [id])
  classRoom  ClassRoom @relation(fields: [classId], references: [id])
}

model FileUpload {
  id        Int      @id @default(autoincrement())
  filePath  String
  fileType  String  
  userId    Int
  classId   Int
  fileName  String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  class     ClassRoom @relation(fields: [classId], references: [id])
  comments  Comment[]

  Assignment Assignment[]
}

model Comment {
  id        Int    @id @default(autoincrement())
  content   String
  fileId    Int
  authorId  Int
  author    User   @relation(fields: [authorId], references: [id])
  file      FileUpload @relation(fields: [fileId], references: [id])
}

enum Role {
  ADMIN
  MODERATOR
  NORMAL
}
